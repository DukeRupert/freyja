package views

import (
	"fmt"
	"github.com/dukerupert/freyja/internal/shared/interfaces"
	"strconv"
)

// formatPrice converts cents to dollars
func formatPrice(cents int32) string {
	dollars := float64(cents) / 100
	return fmt.Sprintf("$%.2f", dollars)
}

// formatStatusText returns the status text
func formatStatusText(active bool) string {
	if active {
		return "Active"
	}
	return "Inactive"
}

// formatStatusClass returns the CSS classes for status styling
func formatStatusClass(active bool) string {
	if active {
		return "bg-green-100 text-green-800"
	}
	return "bg-red-100 text-red-800"
}

templ Layout(title string) {
	<!DOCTYPE html>
	<html lang="en">
		<head>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			<title>{ title } - Admin Panel</title>
			<script src="https://cdn.tailwindcss.com"></script>
			<script src="https://unpkg.com/htmx.org@1.9.12"></script>
		</head>
		<body class="bg-gray-50">
			<nav class="bg-white shadow-sm">
				<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
					<div class="flex justify-between h-16">
						<div class="flex items-center">
							<h1 class="text-xl font-semibold text-gray-900">Admin Panel</h1>
						</div>
						<div class="flex items-center space-x-4">
							<a href="/" class="text-gray-600 hover:text-gray-900">Products</a>
						</div>
					</div>
				</div>
			</nav>
			<main class="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
				{ children... }
			</main>
		</body>
	</html>
}

templ ProductsPage(products []interfaces.Product) {
	@Layout("Products") {
		<div class="px-4 sm:px-0">
			<div class="sm:flex sm:items-center">
				<div class="sm:flex-auto">
					<h1 class="text-2xl font-semibold leading-6 text-gray-900">Products</h1>
					<p class="mt-2 text-sm text-gray-700">
						A list of all products in your store including name, price, stock, and status.
					</p>
				</div>
				<div class="mt-4 sm:ml-16 sm:mt-0 sm:flex-none">
					<button
						type="button"
						hx-get="/products/add"
						hx-target="#modal-container"
						hx-swap="innerHTML"
						class="block rounded-md bg-indigo-600 px-3 py-2 text-center text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
					>
						Add Product
					</button>
				</div>
			</div>
			<div class="mt-8">
				<div class="mb-4">
					<button
						hx-get="/products"
						hx-target="#products-table"
						hx-swap="outerHTML"
						hx-trigger="click, productCreated from:body"
						class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
					>
						<svg class="h-4 w-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
						</svg>
						Refresh
					</button>
				</div>
				<div id="products-table">
					@ProductsTable(products)
				</div>
			</div>
		</div>
		<!-- Modal Container -->
		<div id="modal-container"></div>
		<script>
			// Listen for the productCreated event to handle additional UI updates
			document.body.addEventListener('productCreated', function(event) {
			// Remove empty state if it exists
			document.getElementById('empty-state')?.remove();
			// Could also update counters, refresh stats, etc.
			console.log('New product created successfully');
			});
		</script>
	}
}

templ ProductsTable(products []interfaces.Product) {
	<div class="bg-white shadow-sm ring-1 ring-gray-900/5 rounded-lg">
		<table class="min-w-full divide-y divide-gray-300" id="products-table">
			<thead class="bg-gray-50">
				<tr>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Product
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Price
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Stock
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Status
					</th>
					<th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
						Created
					</th>
					<th scope="col" class="relative px-6 py-3">
						<span class="sr-only">Actions</span>
					</th>
				</tr>
			</thead>
			<tbody class="bg-white divide-y divide-gray-200" id="products-tbody">
				for _, product := range products {
					@ProductRow(product)
				}
				if len(products) == 0 {
					<tr id="empty-state">
						<td colspan="6" class="px-6 py-8 text-center text-sm text-gray-500">
							No products found. 
							<a href="#" class="text-indigo-600 hover:text-indigo-500">Add your first product</a>.
						</td>
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ ProductRow(product interfaces.Product) {
	<tr class="hover:bg-gray-50">
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="flex items-center">
				<div>
					<div class="text-sm font-medium text-gray-900">
						{ product.Name }
					</div>
					if product.Description.Valid && product.Description.String != "" {
						<div class="text-sm text-gray-500 max-w-xs truncate">
							{ product.Description.String }
						</div>
					}
				</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm font-medium text-gray-900">
				{ formatPrice(product.Price) }
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="text-sm text-gray-900">
				{ strconv.Itoa(int(product.Stock)) }
			</div>
			if product.Stock <= 5 {
				<div class="text-xs text-red-600">Low stock</div>
			}
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			<span class={ "inline-flex px-2 py-1 text-xs font-semibold rounded-full " + formatStatusClass(product.Active) }>
				{ formatStatusText(product.Active) }
			</span>
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			{ product.CreatedAt.Format("Jan 2, 2006") }
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
			<div class="flex items-center space-x-2">
				<button class="text-indigo-600 hover:text-indigo-900">
					Edit
				</button>
				<button class="text-red-600 hover:text-red-900">
					Delete
				</button>
			</div>
		</td>
	</tr>
}

templ AddProductModal() {
	<!-- Modal Background -->
	<div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50" id="add-product-modal">
		<div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
			<!-- Modal Header -->
			<div class="flex items-center justify-between pb-4 border-b">
				<h3 class="text-lg font-semibold text-gray-900">Add New Product</h3>
				<button
					type="button"
					onclick="document.getElementById('modal-container').innerHTML = ''"
					class="text-gray-400 hover:text-gray-600"
				>
					<svg class="h-6 w-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
					</svg>
				</button>
			</div>
			<!-- Modal Body -->
			<div class="mt-4">
				<form
	hx-post="/products"  
	hx-trigger="submit"
	hx-target="#products-tbody"
	hx-swap="beforeend"
	hx-on::after-request="if(event.detail.successful) { document.getElementById('modal-container').innerHTML = ''; document.getElementById('empty-state')?.remove(); }"
>
					<div class="space-y-4">
						<!-- Name Field -->
						<div>
							<label for="name" class="block text-sm font-medium text-gray-700">Product Name</label>
							<input
								type="text"
								id="name"
								name="name"
								required
								class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
								placeholder="Enter product name"
							/>
						</div>
						<!-- Description Field -->
						<div>
							<label for="description" class="block text-sm font-medium text-gray-700">Description</label>
							<textarea
								id="description"
								name="description"
								rows="3"
								class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
								placeholder="Enter product description"
							></textarea>
						</div>
						<!-- Price Field -->
						<div>
							<label for="price" class="block text-sm font-medium text-gray-700">Price ($)</label>
							<input
								type="number"
								id="price"
								name="price"
								step="0.01"
								min="0"
								required
								class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
								placeholder="0.00"
							/>
						</div>
						<!-- Stock Field -->
						<div>
							<label for="stock" class="block text-sm font-medium text-gray-700">Stock Quantity</label>
							<input
								type="number"
								id="stock"
								name="stock"
								min="0"
								required
								class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
								placeholder="0"
							/>
						</div>
						<!-- Active Checkbox -->
						<div class="flex items-center">
							<input
								type="checkbox"
								id="active"
								name="active"
								checked
								class="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
							/>
							<label for="active" class="ml-2 block text-sm text-gray-900">
								Product is active
							</label>
						</div>
					</div>
					<!-- Modal Footer -->
					<div class="flex items-center justify-end pt-6 border-t mt-6 space-x-2">
						<button
							type="button"
							onclick="document.getElementById('modal-container').innerHTML = ''"
							class="px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
						>
							Cancel
						</button>
						<button
							type="submit"
							class="px-4 py-2 text-sm font-medium text-white bg-indigo-600 border border-transparent rounded-md shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
						>
							Create Product
						</button>
					</div>
				</form>
			</div>
		</div>
	</div>
}
