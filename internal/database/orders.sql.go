// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package database

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
  customer_id, status, total, stripe_session_id, stripe_payment_intent_id, stripe_charge_id
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, stripe_charge_id, created_at, updated_at
`

type CreateOrderParams struct {
	CustomerID            int32       `db:"customer_id" json:"customer_id"`
	Status                OrderStatus `db:"status" json:"status"`
	Total                 int32       `db:"total" json:"total"`
	StripeSessionID       pgtype.Text `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID pgtype.Text `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeChargeID        pgtype.Text `db:"stripe_charge_id" json:"stripe_charge_id"`
}

type CreateOrderRow struct {
	ID                    int32       `db:"id" json:"id"`
	CustomerID            int32       `db:"customer_id" json:"customer_id"`
	Status                OrderStatus `db:"status" json:"status"`
	Total                 int32       `db:"total" json:"total"`
	StripeSessionID       pgtype.Text `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID pgtype.Text `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeChargeID        pgtype.Text `db:"stripe_charge_id" json:"stripe_charge_id"`
	CreatedAt             time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt             time.Time   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (CreateOrderRow, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerID,
		arg.Status,
		arg.Total,
		arg.StripeSessionID,
		arg.StripePaymentIntentID,
		arg.StripeChargeID,
	)
	var i CreateOrderRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllOrders = `-- name: GetAllOrders :many
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, stripe_charge_id, created_at, updated_at
FROM orders
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllOrdersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

type GetAllOrdersRow struct {
	ID                    int32       `db:"id" json:"id"`
	CustomerID            int32       `db:"customer_id" json:"customer_id"`
	Status                OrderStatus `db:"status" json:"status"`
	Total                 int32       `db:"total" json:"total"`
	StripeSessionID       pgtype.Text `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID pgtype.Text `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeChargeID        pgtype.Text `db:"stripe_charge_id" json:"stripe_charge_id"`
	CreatedAt             time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt             time.Time   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) GetAllOrders(ctx context.Context, arg GetAllOrdersParams) ([]GetAllOrdersRow, error) {
	rows, err := q.db.Query(ctx, getAllOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllOrdersRow{}
	for rows.Next() {
		var i GetAllOrdersRow
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.Total,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.StripeChargeID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrder = `-- name: GetOrder :one

SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at, stripe_charge_id
FROM orders
WHERE id = $1
`

// internal/database/queries/orders.sql - Updated queries
func (q *Queries) GetOrder(ctx context.Context, id int32) (Orders, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeChargeID,
	)
	return i, err
}

const getOrderByStripeChargeID = `-- name: GetOrderByStripeChargeID :one
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at, stripe_charge_id
FROM orders
WHERE stripe_charge_id = $1
`

func (q *Queries) GetOrderByStripeChargeID(ctx context.Context, stripeChargeID pgtype.Text) (Orders, error) {
	row := q.db.QueryRow(ctx, getOrderByStripeChargeID, stripeChargeID)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeChargeID,
	)
	return i, err
}

const getOrderByStripePaymentIntentID = `-- name: GetOrderByStripePaymentIntentID :one
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at, stripe_charge_id
FROM orders
WHERE stripe_payment_intent_id = $1
`

func (q *Queries) GetOrderByStripePaymentIntentID(ctx context.Context, stripePaymentIntentID pgtype.Text) (Orders, error) {
	row := q.db.QueryRow(ctx, getOrderByStripePaymentIntentID, stripePaymentIntentID)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeChargeID,
	)
	return i, err
}

const getOrderCountByStatus = `-- name: GetOrderCountByStatus :many
SELECT status, COUNT(*)::integer as count
FROM orders
GROUP BY status
ORDER BY count DESC
`

type GetOrderCountByStatusRow struct {
	Status OrderStatus `db:"status" json:"status"`
	Count  int32       `db:"count" json:"count"`
}

func (q *Queries) GetOrderCountByStatus(ctx context.Context) ([]GetOrderCountByStatusRow, error) {
	rows, err := q.db.Query(ctx, getOrderCountByStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderCountByStatusRow{}
	for rows.Next() {
		var i GetOrderCountByStatusRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderStats = `-- name: GetOrderStats :one
SELECT 
  COUNT(*) as total_orders,
  COALESCE(SUM(total), 0) as total_revenue,
  COALESCE(AVG(total), 0) as average_order_value,
  COUNT(CASE WHEN status = 'confirmed' THEN 1 END) as confirmed_orders,
  COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_orders,
  COUNT(CASE WHEN status = 'cancelled' THEN 1 END) as cancelled_orders
FROM orders
`

type GetOrderStatsRow struct {
	TotalOrders       int64       `db:"total_orders" json:"total_orders"`
	TotalRevenue      interface{} `db:"total_revenue" json:"total_revenue"`
	AverageOrderValue interface{} `db:"average_order_value" json:"average_order_value"`
	ConfirmedOrders   int64       `db:"confirmed_orders" json:"confirmed_orders"`
	PendingOrders     int64       `db:"pending_orders" json:"pending_orders"`
	CancelledOrders   int64       `db:"cancelled_orders" json:"cancelled_orders"`
}

func (q *Queries) GetOrderStats(ctx context.Context) (GetOrderStatsRow, error) {
	row := q.db.QueryRow(ctx, getOrderStats)
	var i GetOrderStatsRow
	err := row.Scan(
		&i.TotalOrders,
		&i.TotalRevenue,
		&i.AverageOrderValue,
		&i.ConfirmedOrders,
		&i.PendingOrders,
		&i.CancelledOrders,
	)
	return i, err
}

const getOrdersByCustomerID = `-- name: GetOrdersByCustomerID :many
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at, stripe_charge_id
FROM orders
WHERE customer_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByCustomerIDParams struct {
	CustomerID int32 `db:"customer_id" json:"customer_id"`
	Limit      int32 `db:"limit" json:"limit"`
	Offset     int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetOrdersByCustomerID(ctx context.Context, arg GetOrdersByCustomerIDParams) ([]Orders, error) {
	rows, err := q.db.Query(ctx, getOrdersByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Orders{}
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.Total,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeChargeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByStatus = `-- name: GetOrdersByStatus :many
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at, stripe_charge_id
FROM orders
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByStatusParams struct {
	Status OrderStatus `db:"status" json:"status"`
	Limit  int32       `db:"limit" json:"limit"`
	Offset int32       `db:"offset" json:"offset"`
}

func (q *Queries) GetOrdersByStatus(ctx context.Context, arg GetOrdersByStatusParams) ([]Orders, error) {
	rows, err := q.db.Query(ctx, getOrdersByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Orders{}
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.Total,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeChargeID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET status = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, stripe_charge_id, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     int32       `db:"id" json:"id"`
	Status OrderStatus `db:"status" json:"status"`
}

type UpdateOrderStatusRow struct {
	ID                    int32       `db:"id" json:"id"`
	CustomerID            int32       `db:"customer_id" json:"customer_id"`
	Status                OrderStatus `db:"status" json:"status"`
	Total                 int32       `db:"total" json:"total"`
	StripeSessionID       pgtype.Text `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID pgtype.Text `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeChargeID        pgtype.Text `db:"stripe_charge_id" json:"stripe_charge_id"`
	CreatedAt             time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt             time.Time   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (UpdateOrderStatusRow, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i UpdateOrderStatusRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStripeChargeID = `-- name: UpdateStripeChargeID :one
UPDATE orders
SET stripe_charge_id = $2, updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, stripe_charge_id, created_at, updated_at
`

type UpdateStripeChargeIDParams struct {
	ID             int32       `db:"id" json:"id"`
	StripeChargeID pgtype.Text `db:"stripe_charge_id" json:"stripe_charge_id"`
}

type UpdateStripeChargeIDRow struct {
	ID                    int32       `db:"id" json:"id"`
	CustomerID            int32       `db:"customer_id" json:"customer_id"`
	Status                OrderStatus `db:"status" json:"status"`
	Total                 int32       `db:"total" json:"total"`
	StripeSessionID       pgtype.Text `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID pgtype.Text `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	StripeChargeID        pgtype.Text `db:"stripe_charge_id" json:"stripe_charge_id"`
	CreatedAt             time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt             time.Time   `db:"updated_at" json:"updated_at"`
}

func (q *Queries) UpdateStripeChargeID(ctx context.Context, arg UpdateStripeChargeIDParams) (UpdateStripeChargeIDRow, error) {
	row := q.db.QueryRow(ctx, updateStripeChargeID, arg.ID, arg.StripeChargeID)
	var i UpdateStripeChargeIDRow
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.StripeChargeID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
