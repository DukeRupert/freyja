// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: carts.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const clearCartItems = `-- name: ClearCartItems :exec
DELETE FROM cart_items
WHERE cart_id = $1
`

func (q *Queries) ClearCartItems(ctx context.Context, cartID int32) error {
	_, err := q.db.Exec(ctx, clearCartItems, cartID)
	return err
}

const createCart = `-- name: CreateCart :one
INSERT INTO carts (
  customer_id, session_id
) VALUES (
  $1, $2
)
RETURNING id, customer_id, session_id, created_at, updated_at
`

type CreateCartParams struct {
	CustomerID pgtype.Int4 `db:"customer_id" json:"customer_id"`
	SessionID  pgtype.Text `db:"session_id" json:"session_id"`
}

func (q *Queries) CreateCart(ctx context.Context, arg CreateCartParams) (Carts, error) {
	row := q.db.QueryRow(ctx, createCart, arg.CustomerID, arg.SessionID)
	var i Carts
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCart = `-- name: DeleteCart :exec
DELETE FROM carts
WHERE id = $1
`

func (q *Queries) DeleteCart(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCart, id)
	return err
}

const getCart = `-- name: GetCart :one

SELECT id, customer_id, session_id, created_at, updated_at
FROM carts
WHERE id = $1
`

// internal/database/queries/carts.sql
func (q *Queries) GetCart(ctx context.Context, id int32) (Carts, error) {
	row := q.db.QueryRow(ctx, getCart, id)
	var i Carts
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartByCustomerID = `-- name: GetCartByCustomerID :one
SELECT id, customer_id, session_id, created_at, updated_at
FROM carts
WHERE customer_id = $1
`

func (q *Queries) GetCartByCustomerID(ctx context.Context, customerID pgtype.Int4) (Carts, error) {
	row := q.db.QueryRow(ctx, getCartByCustomerID, customerID)
	var i Carts
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCartBySessionID = `-- name: GetCartBySessionID :one
SELECT id, customer_id, session_id, created_at, updated_at
FROM carts
WHERE session_id = $1
`

func (q *Queries) GetCartBySessionID(ctx context.Context, sessionID pgtype.Text) (Carts, error) {
	row := q.db.QueryRow(ctx, getCartBySessionID, sessionID)
	var i Carts
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCartTimestamp = `-- name: UpdateCartTimestamp :one
UPDATE carts
SET updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, session_id, created_at, updated_at
`

func (q *Queries) UpdateCartTimestamp(ctx context.Context, id int32) (Carts, error) {
	row := q.db.QueryRow(ctx, updateCartTimestamp, id)
	var i Carts
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.SessionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
