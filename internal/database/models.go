// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package database

import (
	"database/sql/driver"
	"fmt"
	"net/netip"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

type OrderStatus string

const (
	OrderStatusPending           OrderStatus = "pending"
	OrderStatusPaymentProcessing OrderStatus = "payment_processing"
	OrderStatusConfirmed         OrderStatus = "confirmed"
	OrderStatusProcessing        OrderStatus = "processing"
	OrderStatusShipped           OrderStatus = "shipped"
	OrderStatusDelivered         OrderStatus = "delivered"
	OrderStatusCancelled         OrderStatus = "cancelled"
	OrderStatusRefunded          OrderStatus = "refunded"
)

func (e *OrderStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = OrderStatus(s)
	case string:
		*e = OrderStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for OrderStatus: %T", src)
	}
	return nil
}

type NullOrderStatus struct {
	OrderStatus OrderStatus `json:"order_status"`
	Valid       bool        `json:"valid"` // Valid is true if OrderStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullOrderStatus) Scan(value interface{}) error {
	if value == nil {
		ns.OrderStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.OrderStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullOrderStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.OrderStatus), nil
}

type AuditLogs struct {
	ID           int32       `db:"id" json:"id"`
	UserID       pgtype.Int4 `db:"user_id" json:"user_id"`
	SessionID    pgtype.Text `db:"session_id" json:"session_id"`
	Action       string      `db:"action" json:"action"`
	Resource     string      `db:"resource" json:"resource"`
	ResourceID   pgtype.Text `db:"resource_id" json:"resource_id"`
	Changes      []byte      `db:"changes" json:"changes"`
	Metadata     []byte      `db:"metadata" json:"metadata"`
	IpAddress    *netip.Addr `db:"ip_address" json:"ip_address"`
	UserAgent    pgtype.Text `db:"user_agent" json:"user_agent"`
	Success      bool        `db:"success" json:"success"`
	ErrorMessage pgtype.Text `db:"error_message" json:"error_message"`
	CreatedAt    time.Time   `db:"created_at" json:"created_at"`
}

type CartItems struct {
	ID                   int32       `db:"id" json:"id"`
	CartID               int32       `db:"cart_id" json:"cart_id"`
	ProductVariantID     int32       `db:"product_variant_id" json:"product_variant_id"`
	Quantity             int32       `db:"quantity" json:"quantity"`
	Price                int32       `db:"price" json:"price"`
	PurchaseType         string      `db:"purchase_type" json:"purchase_type"`
	SubscriptionInterval pgtype.Text `db:"subscription_interval" json:"subscription_interval"`
	StripePriceID        string      `db:"stripe_price_id" json:"stripe_price_id"`
	CreatedAt            time.Time   `db:"created_at" json:"created_at"`
}

type Carts struct {
	ID         int32       `db:"id" json:"id"`
	CustomerID pgtype.Int4 `db:"customer_id" json:"customer_id"`
	SessionID  pgtype.Text `db:"session_id" json:"session_id"`
	CreatedAt  time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt  time.Time   `db:"updated_at" json:"updated_at"`
}

type Customers struct {
	ID               int32            `db:"id" json:"id"`
	Email            string           `db:"email" json:"email"`
	FirstName        pgtype.Text      `db:"first_name" json:"first_name"`
	LastName         pgtype.Text      `db:"last_name" json:"last_name"`
	PasswordHash     string           `db:"password_hash" json:"password_hash"`
	StripeCustomerID pgtype.Text      `db:"stripe_customer_id" json:"stripe_customer_id"`
	CreatedAt        time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt        time.Time        `db:"updated_at" json:"updated_at"`
	ArchivedAt       pgtype.Timestamp `db:"archived_at" json:"archived_at"`
}

type Events struct {
	ID            int32     `db:"id" json:"id"`
	EventID       string    `db:"event_id" json:"event_id"`
	EventType     string    `db:"event_type" json:"event_type"`
	AggregateID   string    `db:"aggregate_id" json:"aggregate_id"`
	AggregateType string    `db:"aggregate_type" json:"aggregate_type"`
	Payload       []byte    `db:"payload" json:"payload"`
	Version       int32     `db:"version" json:"version"`
	CreatedAt     time.Time `db:"created_at" json:"created_at"`
}

type OrderItems struct {
	ID                   int32       `db:"id" json:"id"`
	OrderID              int32       `db:"order_id" json:"order_id"`
	ProductVariantID     int32       `db:"product_variant_id" json:"product_variant_id"`
	Name                 string      `db:"name" json:"name"`
	VariantName          string      `db:"variant_name" json:"variant_name"`
	Quantity             int32       `db:"quantity" json:"quantity"`
	Price                int32       `db:"price" json:"price"`
	CreatedAt            time.Time   `db:"created_at" json:"created_at"`
	PurchaseType         string      `db:"purchase_type" json:"purchase_type"`
	SubscriptionInterval pgtype.Text `db:"subscription_interval" json:"subscription_interval"`
	StripePriceID        string      `db:"stripe_price_id" json:"stripe_price_id"`
}

type Orders struct {
	ID                    int32       `db:"id" json:"id"`
	CustomerID            int32       `db:"customer_id" json:"customer_id"`
	Status                OrderStatus `db:"status" json:"status"`
	Total                 int32       `db:"total" json:"total"`
	StripeSessionID       pgtype.Text `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID pgtype.Text `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
	CreatedAt             time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt             time.Time   `db:"updated_at" json:"updated_at"`
	StripeChargeID        pgtype.Text `db:"stripe_charge_id" json:"stripe_charge_id"`
}

type ProductOptionValues struct {
	ID              int32     `db:"id" json:"id"`
	ProductOptionID int32     `db:"product_option_id" json:"product_option_id"`
	Value           string    `db:"value" json:"value"`
	CreatedAt       time.Time `db:"created_at" json:"created_at"`
}

type ProductOptions struct {
	ID        int32     `db:"id" json:"id"`
	ProductID int32     `db:"product_id" json:"product_id"`
	OptionKey string    `db:"option_key" json:"option_key"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
}

type ProductStockSummary struct {
	ProductID        int32       `db:"product_id" json:"product_id"`
	Name             string      `db:"name" json:"name"`
	Description      pgtype.Text `db:"description" json:"description"`
	ProductActive    bool        `db:"product_active" json:"product_active"`
	TotalStock       interface{} `db:"total_stock" json:"total_stock"`
	VariantsInStock  interface{} `db:"variants_in_stock" json:"variants_in_stock"`
	TotalVariants    interface{} `db:"total_variants" json:"total_variants"`
	MinPrice         interface{} `db:"min_price" json:"min_price"`
	MaxPrice         interface{} `db:"max_price" json:"max_price"`
	HasStock         bool        `db:"has_stock" json:"has_stock"`
	StockStatus      string      `db:"stock_status" json:"stock_status"`
	AvailableOptions []byte      `db:"available_options" json:"available_options"`
	LastStockUpdate  interface{} `db:"last_stock_update" json:"last_stock_update"`
}

type ProductVariantOptions struct {
	ID                   int32 `db:"id" json:"id"`
	ProductVariantID     int32 `db:"product_variant_id" json:"product_variant_id"`
	ProductOptionID      int32 `db:"product_option_id" json:"product_option_id"`
	ProductOptionValueID int32 `db:"product_option_value_id" json:"product_option_value_id"`
}

type ProductVariants struct {
	ID                   int32            `db:"id" json:"id"`
	ProductID            int32            `db:"product_id" json:"product_id"`
	Name                 string           `db:"name" json:"name"`
	Price                int32            `db:"price" json:"price"`
	Stock                int32            `db:"stock" json:"stock"`
	Active               bool             `db:"active" json:"active"`
	IsSubscription       bool             `db:"is_subscription" json:"is_subscription"`
	ArchivedAt           pgtype.Timestamp `db:"archived_at" json:"archived_at"`
	CreatedAt            time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt            time.Time        `db:"updated_at" json:"updated_at"`
	StripeProductID      pgtype.Text      `db:"stripe_product_id" json:"stripe_product_id"`
	StripePriceOnetimeID pgtype.Text      `db:"stripe_price_onetime_id" json:"stripe_price_onetime_id"`
	StripePrice14dayID   pgtype.Text      `db:"stripe_price_14day_id" json:"stripe_price_14day_id"`
	StripePrice21dayID   pgtype.Text      `db:"stripe_price_21day_id" json:"stripe_price_21day_id"`
	StripePrice30dayID   pgtype.Text      `db:"stripe_price_30day_id" json:"stripe_price_30day_id"`
	StripePrice60dayID   pgtype.Text      `db:"stripe_price_60day_id" json:"stripe_price_60day_id"`
	OptionsDisplay       pgtype.Text      `db:"options_display" json:"options_display"`
}

type Products struct {
	ID          int32       `db:"id" json:"id"`
	Name        string      `db:"name" json:"name"`
	Description pgtype.Text `db:"description" json:"description"`
	Active      bool        `db:"active" json:"active"`
	CreatedAt   time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time   `db:"updated_at" json:"updated_at"`
}

type Settings struct {
	ID          int32       `db:"id" json:"id"`
	Key         string      `db:"key" json:"key"`
	Value       []byte      `db:"value" json:"value"`
	Description pgtype.Text `db:"description" json:"description"`
	Category    string      `db:"category" json:"category"`
	CreatedAt   time.Time   `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time   `db:"updated_at" json:"updated_at"`
}
