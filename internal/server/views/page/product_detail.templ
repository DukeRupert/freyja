// internal/backend/templates/page/product_detail.templ
package page

import (
	"fmt"
	"github.com/dukerupert/freyja/internal/database"
	"github.com/dukerupert/freyja/internal/server/views/layout"
	"github.com/jackc/pgx/v5/pgtype"
)

type ProductDetailsPageData struct {
	Product  database.Products
	Options  []ProductOption
	Variants []database.ProductVariants
}

type ProductOption struct {
	ID        int32    `db:"id" json:"id"`
	ProductID int32    `db:"product_id" json:"product_id"`
	Key       string   `json:"key"`
	Values    []string `json:"values"`
}

// ProductDetailsPage renders the full product detail view
templ ProductDetailsPage(data ProductDetailsPageData) {
	@layout.BaseLayout(layout.BaseLayoutData{
		Title:       "Product details",
		CurrentPage: "products",
		PageTitle:   "Products",
		Breadcrumbs: []layout.Breadcrumb{
			{Name: "Home", URL: "/"},
			{Name: "Products", URL: "/products"},
			{Name: data.Product.Name},
		},
	}) {
		@ProductDetailsContent(data.Product, data.Options, data.Variants)
	}
}

templ ProductDetailsContent(product database.Products, options []ProductOption, variants []database.ProductVariants) {
	<div class="space-y-6">
		@ProductDetailHeader(product)
		@ProductDetailCard(product)
		@ProductOptionsCard(product.ID, options)
		@ProductVariantsSection(variants)
	</div>
}

// ProductDetailHeader renders the product header with name, ID, price and status
templ ProductDetailHeader(product database.Products) {
	<div class="flex items-center justify-between">
		<div>
			<h1 class="text-2xl font-bold text-gray-900">{ product.Name }</h1>
			<p class="text-sm text-gray-500">Product ID: { fmt.Sprintf("%d", product.ID) }</p>
		</div>
		<div class="flex items-center">
			@ProductActions(product.ID)
		</div>
	</div>
}

// ProductDetailCard renders the main product information card
templ ProductDetailCard(product database.Products) {
	<div class="bg-white shadow rounded-lg p-6">
		<h2 class="text-lg font-medium text-gray-900 mb-4">Product Information</h2>
		<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
			<div>
				<label class="block text-sm font-medium text-gray-700">Name</label>
				<p class="mt-1 text-sm text-gray-900">{ product.Name }</p>
			</div>
			<div>
				<label class="block text-sm font-medium text-gray-700">Status</label>
				@StatusBadge(product.Active)
			</div>
			<div class="md:col-span-2">
				<label class="block text-sm font-medium text-gray-700">Description</label>
				<p class="mt-1 text-sm text-gray-900">{ getDescriptionOrDefault(product.Description) }</p>
			</div>
		</div>
	</div>
}

// ProductOptionsCard renders the product options card for variant creation
templ ProductOptionsCard(productID int32, options []ProductOption) {
	<div id="product-options-card" class="bg-white shadow rounded-lg p-6">
		<div class="flex items-center justify-between mb-4">
			<h2 class="text-lg font-medium text-gray-900" title="Options are used to create product variants">Product Options</h2>
			<button
				hx-get={ fmt.Sprintf("/products/%d/options/create", productID) }
				hx-target="next ul"
				hx-swap="afterbegin"
				class="btn btn-primary"
			>
				Add Option
			</button>
		</div>
		<ul id="product-options-list" class="space-y-4">
			for _, option := range options {
				@ProductOptionCard(option)
			}
		</ul>
	</div>
}

templ ProductOptionCard(option ProductOption) {
	<li id={ fmt.Sprintf("option-%s", option.Key) } class="shift-in border border-gray-200 rounded-lg p-3 bg-white">
		<div class="flex items-center justify-between">
			<div class="flex items-center space-x-3">
				<span class="text-sm font-medium text-gray-900">{ option.Key }</span>
				<ul id={ fmt.Sprintf("option-%s-values", option.Key)} class="flex flex-wrap gap-1">
					for _, value := range option.Values {
						if value != "" {
							<span class="inline-flex items-center px-2 py-0.5 rounded text-xs bg-gray-100 text-gray-700">
								{ value }
							</span>
						}
					}
					<button hx-get={ fmt.Sprintf("/options/%d/values/create", option.ID) } hx-target="closest ul" hx-swap="afterbegin" class="inline-flex items-center px-2 py-0.5 rounded text-xs text-blue-600 hover:bg-blue-50 border border-dashed border-blue-300">
						+ Add
					</button>
				</ul>
			</div>
			<button 
				hx-delete={ fmt.Sprintf("/options/%d", option.ID) } 
				hx-target="closest li" 
				hx-swap="outerHTML" 
				class="p-1 text-gray-400 hover:text-red-500 hover:bg-red-50 rounded transition-colors duration-200"
				title="Delete option"
			>
				<svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
					<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
				</svg>
			</button>
		</div>
	</li>
}

// ProductVariantsSection renders the variants table or empty state
templ ProductVariantsSection(variants []database.ProductVariants) {
	<div class="bg-white shadow rounded-lg p-6">
		<h2 class="text-lg font-medium text-gray-900 mb-4">
			Variants ({ fmt.Sprintf("%d", len(variants)) })
		</h2>
		if len(variants) == 0 {
			@EmptyVariantsState()
		} else {
			@VariantsTable(variants)
		}
	</div>
}

// EmptyVariantsState renders when no variants exist
templ EmptyVariantsState() {
	<p class="text-gray-500">No variants available for this product.</p>
}

// VariantsTable renders the variants data table
templ VariantsTable(variants []database.ProductVariants) {
	<div class="overflow-x-auto">
		<table class="min-w-full divide-y divide-gray-200">
			<thead class="bg-gray-50">
				<tr>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Price</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock</th>
					<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
				</tr>
			</thead>
			<tbody class="bg-white divide-y divide-gray-200">
				for _, variant := range variants {
					@VariantRow(variant)
				}
			</tbody>
		</table>
	</div>
}

// VariantRow renders a single variant table row
templ VariantRow(variant database.ProductVariants) {
	<tr class="hover:bg-gray-50">
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ variant.Name }</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ formatPrice(variant.Price) }</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{ fmt.Sprintf("%d", variant.Stock) }</td>
		<td class="px-6 py-4 whitespace-nowrap">
			@StatusBadge(variant.Active)
		</td>
	</tr>
}

// StatusBadge renders active/inactive status badge
templ StatusBadge(active bool) {
	if active {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
			Active
		</span>
	} else {
		<span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-red-100 text-red-800">
			Inactive
		</span>
	}
}

// ProductActions renders the action buttons
templ ProductActions(id int32) {
	<div class="dropdown dropdown-end">
		<div tabindex="0" role="button" class="btn m-1">
			<svg
				xmlns="http://www.w3.org/2000/svg"
				fill="none"
				viewBox="0 0 24 24"
				stroke-width="1.5"
				stroke="currentColor"
				class="size-6"
			>
				<path
					stroke-linecap="round"
					stroke-linejoin="round"
					d="M12 6.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 12.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5ZM12 18.75a.75.75 0 1 1 0-1.5.75.75 0 0 1 0 1.5Z"
				></path>
			</svg>
			<p class="hidden sm:block">Actions</p>
		</div>
		<ul tabindex="0" class="dropdown-content menu bg-base-100 rounded-box z-1 w-52 p-2 shadow-sm">
			<li><a>Edit product</a></li>
			<li><a>Manage stock</a></li>
			<li class="text-error">
				<a hx-delete={ fmt.Sprintf("/products/%d", id) } hx-confirm="Are you sure you wish to delete this product?">
					Delete
					product
				</a>
			</li>
		</ul>
	</div>
}

// ErrorState renders error messages
templ ErrorState(message string, statusClass string) {
	<div class={ "p-4 border rounded-md" , statusClass }>
		<p>{ message }</p>
	</div>
}

// formatPrice converts cents to dollar format
func formatPrice(cents int32) string {
	return fmt.Sprintf("$%.2f", float64(cents)/100)
}

// getDescriptionOrDefault returns description or default text
func getDescriptionOrDefault(desc pgtype.Text) string {
	if desc.Valid && desc.String != "" {
		return desc.String
	}
	return "No description available"
}
