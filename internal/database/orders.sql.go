// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: orders.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createOrder = `-- name: CreateOrder :one
INSERT INTO orders (
    customer_id, status, total, stripe_session_id, stripe_payment_intent_id
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
`

type CreateOrderParams struct {
	CustomerID            int32       `db:"customer_id" json:"customer_id"`
	Status                OrderStatus `db:"status" json:"status"`
	Total                 int32       `db:"total" json:"total"`
	StripeSessionID       pgtype.Text `db:"stripe_session_id" json:"stripe_session_id"`
	StripePaymentIntentID pgtype.Text `db:"stripe_payment_intent_id" json:"stripe_payment_intent_id"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) (Orders, error) {
	row := q.db.QueryRow(ctx, createOrder,
		arg.CustomerID,
		arg.Status,
		arg.Total,
		arg.StripeSessionID,
		arg.StripePaymentIntentID,
	)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    order_id, product_id, name, quantity, price
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, order_id, product_id, name, quantity, price, created_at
`

type CreateOrderItemParams struct {
	OrderID   int32  `db:"order_id" json:"order_id"`
	ProductID int32  `db:"product_id" json:"product_id"`
	Name      string `db:"name" json:"name"`
	Quantity  int32  `db:"quantity" json:"quantity"`
	Price     int32  `db:"price" json:"price"`
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItems, error) {
	row := q.db.QueryRow(ctx, createOrderItem,
		arg.OrderID,
		arg.ProductID,
		arg.Name,
		arg.Quantity,
		arg.Price,
	)
	var i OrderItems
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Name,
		&i.Quantity,
		&i.Price,
		&i.CreatedAt,
	)
	return i, err
}

const getCustomerOrderCount = `-- name: GetCustomerOrderCount :one
SELECT COUNT(*) 
FROM orders
WHERE customer_id = $1
`

func (q *Queries) GetCustomerOrderCount(ctx context.Context, customerID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getCustomerOrderCount, customerID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getOrder = `-- name: GetOrder :one

SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
FROM orders
WHERE id = $1
`

// internal/database/queries/orders.sql
func (q *Queries) GetOrder(ctx context.Context, id int32) (Orders, error) {
	row := q.db.QueryRow(ctx, getOrder, id)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByStripePaymentIntentID = `-- name: GetOrderByStripePaymentIntentID :one
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
FROM orders
WHERE stripe_payment_intent_id = $1
`

func (q *Queries) GetOrderByStripePaymentIntentID(ctx context.Context, stripePaymentIntentID pgtype.Text) (Orders, error) {
	row := q.db.QueryRow(ctx, getOrderByStripePaymentIntentID, stripePaymentIntentID)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByStripeSessionID = `-- name: GetOrderByStripeSessionID :one
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
FROM orders
WHERE stripe_session_id = $1
`

func (q *Queries) GetOrderByStripeSessionID(ctx context.Context, stripeSessionID pgtype.Text) (Orders, error) {
	row := q.db.QueryRow(ctx, getOrderByStripeSessionID, stripeSessionID)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderCountByStatus = `-- name: GetOrderCountByStatus :many
SELECT status, COUNT(*)::integer as count
FROM orders
GROUP BY status
ORDER BY count DESC
`

type GetOrderCountByStatusRow struct {
	Status OrderStatus `db:"status" json:"status"`
	Count  int32       `db:"count" json:"count"`
}

func (q *Queries) GetOrderCountByStatus(ctx context.Context) ([]GetOrderCountByStatusRow, error) {
	rows, err := q.db.Query(ctx, getOrderCountByStatus)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderCountByStatusRow{}
	for rows.Next() {
		var i GetOrderCountByStatusRow
		if err := rows.Scan(&i.Status, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderItems = `-- name: GetOrderItems :many
SELECT id, order_id, product_id, name, quantity, price, created_at
FROM order_items
WHERE order_id = $1
ORDER BY created_at ASC
`

func (q *Queries) GetOrderItems(ctx context.Context, orderID int32) ([]OrderItems, error) {
	rows, err := q.db.Query(ctx, getOrderItems, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []OrderItems{}
	for rows.Next() {
		var i OrderItems
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Name,
			&i.Quantity,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderWithItems = `-- name: GetOrderWithItems :many
SELECT o.id, o.customer_id, o.status, o.total, o.stripe_session_id, o.stripe_payment_intent_id, o.created_at, o.updated_at, oi.id, oi.order_id, oi.product_id, oi.name, oi.quantity, oi.price, oi.created_at
FROM orders o
LEFT JOIN order_items oi ON o.id = oi.order_id
WHERE o.id = $1
`

type GetOrderWithItemsRow struct {
	Orders     Orders     `db:"orders" json:"orders"`
	OrderItems OrderItems `db:"order_items" json:"order_items"`
}

func (q *Queries) GetOrderWithItems(ctx context.Context, id int32) ([]GetOrderWithItemsRow, error) {
	rows, err := q.db.Query(ctx, getOrderWithItems, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderWithItemsRow{}
	for rows.Next() {
		var i GetOrderWithItemsRow
		if err := rows.Scan(
			&i.Orders.ID,
			&i.Orders.CustomerID,
			&i.Orders.Status,
			&i.Orders.Total,
			&i.Orders.StripeSessionID,
			&i.Orders.StripePaymentIntentID,
			&i.Orders.CreatedAt,
			&i.Orders.UpdatedAt,
			&i.OrderItems.ID,
			&i.OrderItems.OrderID,
			&i.OrderItems.ProductID,
			&i.OrderItems.Name,
			&i.OrderItems.Quantity,
			&i.OrderItems.Price,
			&i.OrderItems.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByCustomerID = `-- name: GetOrdersByCustomerID :many
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
FROM orders
WHERE customer_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByCustomerIDParams struct {
	CustomerID int32 `db:"customer_id" json:"customer_id"`
	Limit      int32 `db:"limit" json:"limit"`
	Offset     int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetOrdersByCustomerID(ctx context.Context, arg GetOrdersByCustomerIDParams) ([]Orders, error) {
	rows, err := q.db.Query(ctx, getOrdersByCustomerID, arg.CustomerID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Orders{}
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.Total,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrdersByStatus = `-- name: GetOrdersByStatus :many
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
FROM orders
WHERE status = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetOrdersByStatusParams struct {
	Status OrderStatus `db:"status" json:"status"`
	Limit  int32       `db:"limit" json:"limit"`
	Offset int32       `db:"offset" json:"offset"`
}

func (q *Queries) GetOrdersByStatus(ctx context.Context, arg GetOrdersByStatusParams) ([]Orders, error) {
	rows, err := q.db.Query(ctx, getOrdersByStatus, arg.Status, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Orders{}
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.Total,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentOrders = `-- name: GetRecentOrders :many
SELECT id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
FROM orders
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetRecentOrdersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetRecentOrders(ctx context.Context, arg GetRecentOrdersParams) ([]Orders, error) {
	rows, err := q.db.Query(ctx, getRecentOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Orders{}
	for rows.Next() {
		var i Orders
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.Status,
			&i.Total,
			&i.StripeSessionID,
			&i.StripePaymentIntentID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTotalOrderCount = `-- name: GetTotalOrderCount :one
SELECT COUNT(*)::integer as total_orders
FROM orders
`

func (q *Queries) GetTotalOrderCount(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, getTotalOrderCount)
	var total_orders int32
	err := row.Scan(&total_orders)
	return total_orders, err
}

const getTotalRevenue = `-- name: GetTotalRevenue :one
SELECT COALESCE(SUM(total), 0)::integer as total_revenue
FROM orders
WHERE status IN ('confirmed', 'processing', 'shipped', 'delivered')
`

func (q *Queries) GetTotalRevenue(ctx context.Context) (int32, error) {
	row := q.db.QueryRow(ctx, getTotalRevenue)
	var total_revenue int32
	err := row.Scan(&total_revenue)
	return total_revenue, err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :one
UPDATE orders
SET
    status = $2,
    updated_at = NOW()
WHERE id = $1
RETURNING id, customer_id, status, total, stripe_session_id, stripe_payment_intent_id, created_at, updated_at
`

type UpdateOrderStatusParams struct {
	ID     int32       `db:"id" json:"id"`
	Status OrderStatus `db:"status" json:"status"`
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) (Orders, error) {
	row := q.db.QueryRow(ctx, updateOrderStatus, arg.ID, arg.Status)
	var i Orders
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.Status,
		&i.Total,
		&i.StripeSessionID,
		&i.StripePaymentIntentID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
