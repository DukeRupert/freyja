// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: customers.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  email, first_name, last_name, password_hash
) VALUES (
  $1, $2, $3, $4
)
RETURNING id, email, first_name, last_name, password_hash, stripe_customer_id, created_at, updated_at
`

type CreateCustomerParams struct {
	Email        string      `db:"email" json:"email"`
	FirstName    pgtype.Text `db:"first_name" json:"first_name"`
	LastName     pgtype.Text `db:"last_name" json:"last_name"`
	PasswordHash string      `db:"password_hash" json:"password_hash"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customers, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.Email,
		arg.FirstName,
		arg.LastName,
		arg.PasswordHash,
	)
	var i Customers
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one

SELECT id, email, first_name, last_name, password_hash, stripe_customer_id, created_at, updated_at
FROM customers
WHERE id = $1
`

// internal/database/queries/customers.sql
func (q *Queries) GetCustomer(ctx context.Context, id int32) (Customers, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customers
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerByEmail = `-- name: GetCustomerByEmail :one
SELECT id, email, first_name, last_name, password_hash, stripe_customer_id, created_at, updated_at
FROM customers
WHERE LOWER(email) = LOWER($1)
`

func (q *Queries) GetCustomerByEmail(ctx context.Context, lower string) (Customers, error) {
	row := q.db.QueryRow(ctx, getCustomerByEmail, lower)
	var i Customers
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCustomerCount = `-- name: GetCustomerCount :one
SELECT COUNT(*) FROM customers
`

func (q *Queries) GetCustomerCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getCustomerCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, email, first_name, last_name, password_hash, stripe_customer_id, created_at, updated_at
FROM customers
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customers, error) {
	rows, err := q.db.Query(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customers{}
	for rows.Next() {
		var i Customers
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.FirstName,
			&i.LastName,
			&i.PasswordHash,
			&i.StripeCustomerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET
  email = $2,
  first_name = $3,
  last_name = $4,
  updated_at = NOW()
WHERE id = $1
RETURNING id, email, first_name, last_name, password_hash, stripe_customer_id, created_at, updated_at
`

type UpdateCustomerParams struct {
	ID        int32       `db:"id" json:"id"`
	Email     string      `db:"email" json:"email"`
	FirstName pgtype.Text `db:"first_name" json:"first_name"`
	LastName  pgtype.Text `db:"last_name" json:"last_name"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customers, error) {
	row := q.db.QueryRow(ctx, updateCustomer,
		arg.ID,
		arg.Email,
		arg.FirstName,
		arg.LastName,
	)
	var i Customers
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomerPassword = `-- name: UpdateCustomerPassword :one
UPDATE customers
SET
  password_hash = $2,
  updated_at = NOW()
WHERE id = $1
RETURNING id, email, first_name, last_name, password_hash, stripe_customer_id, created_at, updated_at
`

type UpdateCustomerPasswordParams struct {
	ID           int32  `db:"id" json:"id"`
	PasswordHash string `db:"password_hash" json:"password_hash"`
}

func (q *Queries) UpdateCustomerPassword(ctx context.Context, arg UpdateCustomerPasswordParams) (Customers, error) {
	row := q.db.QueryRow(ctx, updateCustomerPassword, arg.ID, arg.PasswordHash)
	var i Customers
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCustomerStripeID = `-- name: UpdateCustomerStripeID :one
UPDATE customers
SET
  stripe_customer_id = $2,
  updated_at = NOW()
WHERE id = $1
RETURNING id, email, first_name, last_name, password_hash, stripe_customer_id, created_at, updated_at
`

type UpdateCustomerStripeIDParams struct {
	ID               int32       `db:"id" json:"id"`
	StripeCustomerID pgtype.Text `db:"stripe_customer_id" json:"stripe_customer_id"`
}

func (q *Queries) UpdateCustomerStripeID(ctx context.Context, arg UpdateCustomerStripeIDParams) (Customers, error) {
	row := q.db.QueryRow(ctx, updateCustomerStripeID, arg.ID, arg.StripeCustomerID)
	var i Customers
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.FirstName,
		&i.LastName,
		&i.PasswordHash,
		&i.StripeCustomerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
