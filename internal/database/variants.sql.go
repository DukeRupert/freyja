// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: variants.sql

package database

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const activateVariant = `-- name: ActivateVariant :one
UPDATE product_variants
SET
    active = true,
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NULL
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

func (q *Queries) ActivateVariant(ctx context.Context, id int32) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, activateVariant, id)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const archiveVariant = `-- name: ArchiveVariant :one
UPDATE product_variants
SET
    archived_at = NOW(),
    active = false,
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NULL
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

func (q *Queries) ArchiveVariant(ctx context.Context, id int32) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, archiveVariant, id)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const createVariant = `-- name: CreateVariant :one
INSERT INTO product_variants (
    product_id, name, price, stock, active, is_subscription, options_display
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
)
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

type CreateVariantParams struct {
	ProductID      int32       `db:"product_id" json:"product_id"`
	Name           string      `db:"name" json:"name"`
	Price          int32       `db:"price" json:"price"`
	Stock          int32       `db:"stock" json:"stock"`
	Active         bool        `db:"active" json:"active"`
	IsSubscription bool        `db:"is_subscription" json:"is_subscription"`
	OptionsDisplay pgtype.Text `db:"options_display" json:"options_display"`
}

func (q *Queries) CreateVariant(ctx context.Context, arg CreateVariantParams) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, createVariant,
		arg.ProductID,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.Active,
		arg.IsSubscription,
		arg.OptionsDisplay,
	)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const deactivateVariant = `-- name: DeactivateVariant :one
UPDATE product_variants
SET
    active = false,
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NULL
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

func (q *Queries) DeactivateVariant(ctx context.Context, id int32) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, deactivateVariant, id)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const decrementVariantStock = `-- name: DecrementVariantStock :one
UPDATE product_variants
SET
    stock = GREATEST(stock - $2, 0),
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NULL AND stock >= $2
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

type DecrementVariantStockParams struct {
	ID    int32 `db:"id" json:"id"`
	Stock int32 `db:"stock" json:"stock"`
}

func (q *Queries) DecrementVariantStock(ctx context.Context, arg DecrementVariantStockParams) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, decrementVariantStock, arg.ID, arg.Stock)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const getActiveVariantsByProduct = `-- name: GetActiveVariantsByProduct :many
SELECT id, product_id, name, price, stock, active, is_subscription, archived_at, created_at, updated_at, stripe_product_id, stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id, stripe_price_30day_id, stripe_price_60day_id, options_display
FROM product_variants
WHERE product_id = $1 AND active = true AND archived_at IS NULL
ORDER BY price ASC, name ASC
`

func (q *Queries) GetActiveVariantsByProduct(ctx context.Context, productID int32) ([]ProductVariants, error) {
	rows, err := q.db.Query(ctx, getActiveVariantsByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariants{}
	for rows.Next() {
		var i ProductVariants
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLowStockVariants = `-- name: GetLowStockVariants :many
SELECT 
    pv.id, pv.product_id, pv.name, pv.price, pv.stock, pv.active, 
    pv.is_subscription, pv.archived_at, pv.created_at, pv.updated_at,
    pv.stripe_product_id, pv.stripe_price_onetime_id, pv.stripe_price_14day_id,
    pv.stripe_price_21day_id, pv.stripe_price_30day_id, pv.stripe_price_60day_id,
    pv.options_display,
    p.name as product_name
FROM product_variants pv
JOIN products p ON pv.product_id = p.id
WHERE pv.active = true 
  AND pv.archived_at IS NULL 
  AND pv.stock <= $1
  AND p.active = true
ORDER BY pv.stock ASC, p.name ASC
`

type GetLowStockVariantsRow struct {
	ID                   int32            `db:"id" json:"id"`
	ProductID            int32            `db:"product_id" json:"product_id"`
	Name                 string           `db:"name" json:"name"`
	Price                int32            `db:"price" json:"price"`
	Stock                int32            `db:"stock" json:"stock"`
	Active               bool             `db:"active" json:"active"`
	IsSubscription       bool             `db:"is_subscription" json:"is_subscription"`
	ArchivedAt           pgtype.Timestamp `db:"archived_at" json:"archived_at"`
	CreatedAt            time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt            time.Time        `db:"updated_at" json:"updated_at"`
	StripeProductID      pgtype.Text      `db:"stripe_product_id" json:"stripe_product_id"`
	StripePriceOnetimeID pgtype.Text      `db:"stripe_price_onetime_id" json:"stripe_price_onetime_id"`
	StripePrice14dayID   pgtype.Text      `db:"stripe_price_14day_id" json:"stripe_price_14day_id"`
	StripePrice21dayID   pgtype.Text      `db:"stripe_price_21day_id" json:"stripe_price_21day_id"`
	StripePrice30dayID   pgtype.Text      `db:"stripe_price_30day_id" json:"stripe_price_30day_id"`
	StripePrice60dayID   pgtype.Text      `db:"stripe_price_60day_id" json:"stripe_price_60day_id"`
	OptionsDisplay       pgtype.Text      `db:"options_display" json:"options_display"`
	ProductName          string           `db:"product_name" json:"product_name"`
}

func (q *Queries) GetLowStockVariants(ctx context.Context, stock int32) ([]GetLowStockVariantsRow, error) {
	rows, err := q.db.Query(ctx, getLowStockVariants, stock)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLowStockVariantsRow{}
	for rows.Next() {
		var i GetLowStockVariantsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
			&i.ProductName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriptionVariants = `-- name: GetSubscriptionVariants :many
SELECT 
    pv.id, pv.product_id, pv.name, pv.price, pv.stock, pv.active, pv.is_subscription,
    pv.archived_at, pv.created_at, pv.updated_at, pv.stripe_product_id,
    pv.stripe_price_onetime_id, pv.stripe_price_14day_id, pv.stripe_price_21day_id,
    pv.stripe_price_30day_id, pv.stripe_price_60day_id, pv.options_display
FROM product_variants pv
JOIN products p ON pv.product_id = p.id
WHERE pv.active = true 
  AND pv.archived_at IS NULL
  AND p.active = true
  AND pv.is_subscription = true
ORDER BY pv.price ASC, pv.name ASC
`

func (q *Queries) GetSubscriptionVariants(ctx context.Context) ([]ProductVariants, error) {
	rows, err := q.db.Query(ctx, getSubscriptionVariants)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariants{}
	for rows.Next() {
		var i ProductVariants
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariant = `-- name: GetVariant :one
SELECT 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
FROM product_variants
WHERE id = $1 AND archived_at IS NULL
`

// END --
func (q *Queries) GetVariant(ctx context.Context, id int32) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, getVariant, id)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const getVariantByStripeProductID = `-- name: GetVariantByStripeProductID :one
SELECT 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
FROM product_variants
WHERE stripe_product_id = $1 AND archived_at IS NULL
`

func (q *Queries) GetVariantByStripeProductID(ctx context.Context, stripeProductID pgtype.Text) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, getVariantByStripeProductID, stripeProductID)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const getVariantWithOptions = `-- name: GetVariantWithOptions :one
SELECT 
    pv.id, pv.product_id, pv.name, pv.price, pv.stock, pv.active, 
    pv.is_subscription, pv.archived_at, pv.created_at, pv.updated_at,
    pv.stripe_product_id, pv.stripe_price_onetime_id, pv.stripe_price_14day_id,
    pv.stripe_price_21day_id, pv.stripe_price_30day_id, pv.stripe_price_60day_id,
    pv.options_display,
    COALESCE(
        json_agg(
            json_build_object(
                'option_id', po.id,
                'option_key', po.option_key,
                'value_id', pov.id,
                'value', pov.value
            ) ORDER BY po.option_key
        ) FILTER (WHERE po.id IS NOT NULL), 
        '[]'::json
    )::text as options
FROM product_variants pv
LEFT JOIN product_variant_options pvo ON pv.id = pvo.product_variant_id
LEFT JOIN product_options po ON pvo.product_option_id = po.id
LEFT JOIN product_option_values pov ON pvo.product_option_value_id = pov.id
WHERE pv.id = $1 AND pv.archived_at IS NULL
GROUP BY pv.id
`

type GetVariantWithOptionsRow struct {
	ID                   int32            `db:"id" json:"id"`
	ProductID            int32            `db:"product_id" json:"product_id"`
	Name                 string           `db:"name" json:"name"`
	Price                int32            `db:"price" json:"price"`
	Stock                int32            `db:"stock" json:"stock"`
	Active               bool             `db:"active" json:"active"`
	IsSubscription       bool             `db:"is_subscription" json:"is_subscription"`
	ArchivedAt           pgtype.Timestamp `db:"archived_at" json:"archived_at"`
	CreatedAt            time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt            time.Time        `db:"updated_at" json:"updated_at"`
	StripeProductID      pgtype.Text      `db:"stripe_product_id" json:"stripe_product_id"`
	StripePriceOnetimeID pgtype.Text      `db:"stripe_price_onetime_id" json:"stripe_price_onetime_id"`
	StripePrice14dayID   pgtype.Text      `db:"stripe_price_14day_id" json:"stripe_price_14day_id"`
	StripePrice21dayID   pgtype.Text      `db:"stripe_price_21day_id" json:"stripe_price_21day_id"`
	StripePrice30dayID   pgtype.Text      `db:"stripe_price_30day_id" json:"stripe_price_30day_id"`
	StripePrice60dayID   pgtype.Text      `db:"stripe_price_60day_id" json:"stripe_price_60day_id"`
	OptionsDisplay       pgtype.Text      `db:"options_display" json:"options_display"`
	Options              string           `db:"options" json:"options"`
}

func (q *Queries) GetVariantWithOptions(ctx context.Context, id int32) (GetVariantWithOptionsRow, error) {
	row := q.db.QueryRow(ctx, getVariantWithOptions, id)
	var i GetVariantWithOptionsRow
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
		&i.Options,
	)
	return i, err
}

const getVariantsByPriceRange = `-- name: GetVariantsByPriceRange :many
SELECT 
    pv.id, pv.product_id, pv.name, pv.price, pv.stock, pv.active, pv.is_subscription,
    pv.archived_at, pv.created_at, pv.updated_at, pv.stripe_product_id,
    pv.stripe_price_onetime_id, pv.stripe_price_14day_id, pv.stripe_price_21day_id,
    pv.stripe_price_30day_id, pv.stripe_price_60day_id, pv.options_display
FROM product_variants pv
JOIN products p ON pv.product_id = p.id
WHERE pv.active = true 
  AND pv.archived_at IS NULL
  AND p.active = true
  AND pv.price >= $1 
  AND pv.price <= $2
ORDER BY pv.price ASC, pv.name ASC
`

type GetVariantsByPriceRangeParams struct {
	MinPrice int32 `db:"min_price" json:"min_price"`
	MaxPrice int32 `db:"max_price" json:"max_price"`
}

func (q *Queries) GetVariantsByPriceRange(ctx context.Context, arg GetVariantsByPriceRangeParams) ([]ProductVariants, error) {
	rows, err := q.db.Query(ctx, getVariantsByPriceRange, arg.MinPrice, arg.MaxPrice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariants{}
	for rows.Next() {
		var i ProductVariants
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariantsByProduct = `-- name: GetVariantsByProduct :many

SELECT id, product_id, name, price, stock, active, is_subscription, archived_at, created_at, updated_at, stripe_product_id, stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id, stripe_price_30day_id, stripe_price_60day_id, options_display 
FROM product_variants
WHERE product_id = $1 AND archived_at IS NULL
ORDER BY price ASC, name ASC
`

// internal/database/queries/variants.sql
// Product variant queries for the variant system
// START --
// Basic variant CRUD operations
func (q *Queries) GetVariantsByProduct(ctx context.Context, productID int32) ([]ProductVariants, error) {
	rows, err := q.db.Query(ctx, getVariantsByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariants{}
	for rows.Next() {
		var i ProductVariants
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariantsInStock = `-- name: GetVariantsInStock :many
SELECT 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
FROM product_variants
WHERE product_id = $1 AND active = true AND stock > 0 AND archived_at IS NULL
ORDER BY price ASC, name ASC
`

func (q *Queries) GetVariantsInStock(ctx context.Context, productID int32) ([]ProductVariants, error) {
	rows, err := q.db.Query(ctx, getVariantsInStock, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariants{}
	for rows.Next() {
		var i ProductVariants
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariantsNeedingStripeSync = `-- name: GetVariantsNeedingStripeSync :many
SELECT 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
FROM product_variants
WHERE active = true 
  AND archived_at IS NULL 
  AND stripe_product_id IS NULL
ORDER BY created_at ASC
LIMIT $1 OFFSET $2
`

type GetVariantsNeedingStripeSyncParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetVariantsNeedingStripeSync(ctx context.Context, arg GetVariantsNeedingStripeSyncParams) ([]ProductVariants, error) {
	rows, err := q.db.Query(ctx, getVariantsNeedingStripeSync, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariants{}
	for rows.Next() {
		var i ProductVariants
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVariantsWithStripeProducts = `-- name: GetVariantsWithStripeProducts :many
SELECT 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
FROM product_variants
WHERE active = true 
  AND archived_at IS NULL 
  AND stripe_product_id IS NOT NULL
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetVariantsWithStripeProductsParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) GetVariantsWithStripeProducts(ctx context.Context, arg GetVariantsWithStripeProductsParams) ([]ProductVariants, error) {
	rows, err := q.db.Query(ctx, getVariantsWithStripeProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductVariants{}
	for rows.Next() {
		var i ProductVariants
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementVariantStock = `-- name: IncrementVariantStock :one
UPDATE product_variants
SET
    stock = stock + $2,
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NULL
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

type IncrementVariantStockParams struct {
	ID    int32 `db:"id" json:"id"`
	Stock int32 `db:"stock" json:"stock"`
}

func (q *Queries) IncrementVariantStock(ctx context.Context, arg IncrementVariantStockParams) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, incrementVariantStock, arg.ID, arg.Stock)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const searchVariants = `-- name: SearchVariants :many

SELECT 
    pv.id, pv.product_id, pv.name, pv.price, pv.stock, pv.active, 
    pv.is_subscription, pv.archived_at, pv.created_at, pv.updated_at,
    pv.stripe_product_id, pv.stripe_price_onetime_id, pv.stripe_price_14day_id,
    pv.stripe_price_21day_id, pv.stripe_price_30day_id, pv.stripe_price_60day_id,
    pv.options_display,
    p.name as product_name
FROM product_variants pv
JOIN products p ON pv.product_id = p.id
WHERE pv.active = true 
  AND pv.archived_at IS NULL
  AND p.active = true
  AND (pv.name ILIKE $1 OR p.name ILIKE $1 OR pv.options_display ILIKE $1)
ORDER BY
  CASE WHEN pv.name ILIKE $1 THEN 1 
       WHEN p.name ILIKE $1 THEN 2 
       ELSE 3 END,
  p.name, pv.price
`

type SearchVariantsRow struct {
	ID                   int32            `db:"id" json:"id"`
	ProductID            int32            `db:"product_id" json:"product_id"`
	Name                 string           `db:"name" json:"name"`
	Price                int32            `db:"price" json:"price"`
	Stock                int32            `db:"stock" json:"stock"`
	Active               bool             `db:"active" json:"active"`
	IsSubscription       bool             `db:"is_subscription" json:"is_subscription"`
	ArchivedAt           pgtype.Timestamp `db:"archived_at" json:"archived_at"`
	CreatedAt            time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt            time.Time        `db:"updated_at" json:"updated_at"`
	StripeProductID      pgtype.Text      `db:"stripe_product_id" json:"stripe_product_id"`
	StripePriceOnetimeID pgtype.Text      `db:"stripe_price_onetime_id" json:"stripe_price_onetime_id"`
	StripePrice14dayID   pgtype.Text      `db:"stripe_price_14day_id" json:"stripe_price_14day_id"`
	StripePrice21dayID   pgtype.Text      `db:"stripe_price_21day_id" json:"stripe_price_21day_id"`
	StripePrice30dayID   pgtype.Text      `db:"stripe_price_30day_id" json:"stripe_price_30day_id"`
	StripePrice60dayID   pgtype.Text      `db:"stripe_price_60day_id" json:"stripe_price_60day_id"`
	OptionsDisplay       pgtype.Text      `db:"options_display" json:"options_display"`
	ProductName          string           `db:"product_name" json:"product_name"`
}

// Search and filtering queries
func (q *Queries) SearchVariants(ctx context.Context, name string) ([]SearchVariantsRow, error) {
	rows, err := q.db.Query(ctx, searchVariants, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []SearchVariantsRow{}
	for rows.Next() {
		var i SearchVariantsRow
		if err := rows.Scan(
			&i.ID,
			&i.ProductID,
			&i.Name,
			&i.Price,
			&i.Stock,
			&i.Active,
			&i.IsSubscription,
			&i.ArchivedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.StripeProductID,
			&i.StripePriceOnetimeID,
			&i.StripePrice14dayID,
			&i.StripePrice21dayID,
			&i.StripePrice30dayID,
			&i.StripePrice60dayID,
			&i.OptionsDisplay,
			&i.ProductName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const unarchiveVariant = `-- name: UnarchiveVariant :one
UPDATE product_variants
SET
    archived_at = NULL,
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NOT NULL
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

func (q *Queries) UnarchiveVariant(ctx context.Context, id int32) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, unarchiveVariant, id)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const updateVariant = `-- name: UpdateVariant :one
UPDATE product_variants
SET
    name = COALESCE(NULLIF($1, ''), name),
    price = COALESCE(NULLIF($2, 0), price),
    stock = COALESCE(NULLIF($3, -1), stock),
    active = COALESCE($4, active),
    is_subscription = COALESCE($5, is_subscription),
    options_display = COALESCE($6, options_display),
    updated_at = NOW()
WHERE id = $7 AND archived_at IS NULL
RETURNING id, product_id, name, price, stock, active, is_subscription, archived_at, created_at, updated_at, stripe_product_id, stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id, stripe_price_30day_id, stripe_price_60day_id, options_display
`

type UpdateVariantParams struct {
	Name           interface{} `db:"name" json:"name"`
	Price          interface{} `db:"price" json:"price"`
	Stock          interface{} `db:"stock" json:"stock"`
	Active         bool        `db:"active" json:"active"`
	IsSubscription bool        `db:"is_subscription" json:"is_subscription"`
	OptionsDisplay pgtype.Text `db:"options_display" json:"options_display"`
	ID             int32       `db:"id" json:"id"`
}

func (q *Queries) UpdateVariant(ctx context.Context, arg UpdateVariantParams) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, updateVariant,
		arg.Name,
		arg.Price,
		arg.Stock,
		arg.Active,
		arg.IsSubscription,
		arg.OptionsDisplay,
		arg.ID,
	)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const updateVariantStock = `-- name: UpdateVariantStock :one
UPDATE product_variants
SET
    stock = $2,
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NULL
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

type UpdateVariantStockParams struct {
	ID    int32 `db:"id" json:"id"`
	Stock int32 `db:"stock" json:"stock"`
}

func (q *Queries) UpdateVariantStock(ctx context.Context, arg UpdateVariantStockParams) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, updateVariantStock, arg.ID, arg.Stock)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}

const updateVariantStripeIDs = `-- name: UpdateVariantStripeIDs :one

UPDATE product_variants
SET
    stripe_product_id = COALESCE($2, stripe_product_id),
    stripe_price_onetime_id = COALESCE($3, stripe_price_onetime_id),
    stripe_price_14day_id = COALESCE($4, stripe_price_14day_id),
    stripe_price_21day_id = COALESCE($5, stripe_price_21day_id),
    stripe_price_30day_id = COALESCE($6, stripe_price_30day_id),
    stripe_price_60day_id = COALESCE($7, stripe_price_60day_id),
    updated_at = NOW()
WHERE id = $1 AND archived_at IS NULL
RETURNING 
    id, product_id, name, price, stock, active, is_subscription,
    archived_at, created_at, updated_at, stripe_product_id,
    stripe_price_onetime_id, stripe_price_14day_id, stripe_price_21day_id,
    stripe_price_30day_id, stripe_price_60day_id, options_display
`

type UpdateVariantStripeIDsParams struct {
	ID                   int32       `db:"id" json:"id"`
	StripeProductID      pgtype.Text `db:"stripe_product_id" json:"stripe_product_id"`
	StripePriceOnetimeID pgtype.Text `db:"stripe_price_onetime_id" json:"stripe_price_onetime_id"`
	StripePrice14dayID   pgtype.Text `db:"stripe_price_14day_id" json:"stripe_price_14day_id"`
	StripePrice21dayID   pgtype.Text `db:"stripe_price_21day_id" json:"stripe_price_21day_id"`
	StripePrice30dayID   pgtype.Text `db:"stripe_price_30day_id" json:"stripe_price_30day_id"`
	StripePrice60dayID   pgtype.Text `db:"stripe_price_60day_id" json:"stripe_price_60day_id"`
}

// Stripe integration queries
func (q *Queries) UpdateVariantStripeIDs(ctx context.Context, arg UpdateVariantStripeIDsParams) (ProductVariants, error) {
	row := q.db.QueryRow(ctx, updateVariantStripeIDs,
		arg.ID,
		arg.StripeProductID,
		arg.StripePriceOnetimeID,
		arg.StripePrice14dayID,
		arg.StripePrice21dayID,
		arg.StripePrice30dayID,
		arg.StripePrice60dayID,
	)
	var i ProductVariants
	err := row.Scan(
		&i.ID,
		&i.ProductID,
		&i.Name,
		&i.Price,
		&i.Stock,
		&i.Active,
		&i.IsSubscription,
		&i.ArchivedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.StripeProductID,
		&i.StripePriceOnetimeID,
		&i.StripePrice14dayID,
		&i.StripePrice21dayID,
		&i.StripePrice30dayID,
		&i.StripePrice60dayID,
		&i.OptionsDisplay,
	)
	return i, err
}
