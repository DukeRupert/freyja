package form

import (
	"fmt"
	"github.com/dukerupert/freyja/internal/server/views/page"
)

templ Create_Options_Modal(product_id int32, errors []FieldError) {
	<!-- Create Form Modal -->
	<dialog open id="modal" class="modal modal-bottom sm:modal-middle">
		<div class="modal-box">
			<h3 class="text-lg font-bold">Create New Options</h3>
			<div class="py-4">
				<form
					id="create_options_form"
					hx-post={ fmt.Sprintf("/products/%d/options", product_id) }
					hx-target="#product-options-card"
					hx-swap="outerHTML"
					class="space-y-4"
				>
					<div class="space-y-2">
						<label class="option_key">
							<span class="text-sm font-medium text-gray-700 mb-1 block">Option</span>
							<input
								type="text"
								id="option_key"
								name="option_key"
								class="input input-bordered w-full"
								required
								minlength="1"
								maxlength="50"
								placeholder="size, weight, color, etc."
							/>
						</label>
					</div>
				</form>
			</div>
			<div class="modal-action">
				<form method="dialog">
					<button class="btn">Cancel</button>
				</form>
				<button type="submit" form="create_options_form" class="btn btn-primary">
					Create Item
				</button>
			</div>
		</div>
	</dialog>
}

templ CreateProductOptionForm(product_id int32, errors []FieldError, formData map[string]interface{}) {
	<form
		id="create_options_form"
		hx-post={ fmt.Sprintf("/products/%d/options", product_id) }
		hx-target="#product-options-card"
		hx-swap="outerHTML"
		class="space-y-4"
	>
		<div class="space-y-2">
			<label class="block">
				<span class="text-sm font-medium text-gray-700 mb-1 block">Option</span>
				<input
					type="text"
					id="option_key"
					name="option_key"
					required
					minlength="1"
					maxlength="50"
					value={ getString(formData, "option_key") }
					class={ "input input-bordered w-full" , templ.KV("input-error",
        hasFieldError(errors, "option_key" )) }
					placeholder="size, weight, color, etc."
				/>
				if optionKeyError := getFieldError(errors, "option_key"); optionKeyError != nil {
					<div class="text-error text-sm mt-1">{ optionKeyError.Message }</div>
				}
			</label>
		</div>
		// Display general form errors (like product_id or form-level errors)
		if productIdError := getFieldError(errors, "product_id"); productIdError != nil {
			<div class="text-error text-sm">{ productIdError.Message }</div>
		}
		if formError := getFieldError(errors, "form"); formError != nil {
			<div class="text-error text-sm">{ formError.Message }</div>
		}
	</form>
}

templ CreateProductOptionSuccess(productID int32, options []page.ProductOption) {
	@page.ProductOptionsCard(productID, options)
	// Close modal
	<dialog id="modal" hx-swap-oob="outerHTML" class="modal"></dialog>
}

templ DeleteProductOption(id int32) {
	<div id={ fmt.Sprintf("option-%d", id) }></div>
}
